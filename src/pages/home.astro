---
import Layout from '../layouts/Layout.astro';
---
<Layout title="Home">
  <div class="max-w-7xl mx-auto grid grid-cols-1 lg:grid-cols-3 gap-6">
    <!-- Main Feed -->
    <div class="lg:col-span-2 space-y-6">
      <!-- Create Post Card -->
      <div class="bg-white rounded-lg shadow-md p-6">
        <div class="flex items-center space-x-4">
          <img id="user-avatar" class="w-12 h-12 rounded-full" alt="Your avatar" />
          <button id="create-post-btn" class="flex-1 bg-gray-100 hover:bg-gray-200 rounded-full px-6 py-3 text-left text-gray-600 transition">
            What's on your mind?
          </button>
        </div>
      </div>

      <!-- Feed Posts -->
      <div id="posts-container" class="space-y-6">
        <div class="text-center py-8">
          <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p class="text-gray-600 mt-4">Loading posts...</p>
        </div>
      </div>
    </div>

    <!-- Sidebar -->
    <div class="space-y-6">
      <!-- User Search -->
      <div class="bg-white rounded-lg shadow-md p-6">
        <h3 class="text-lg font-bold mb-4">Find People</h3>
        <input
          type="text"
          id="user-search"
          placeholder="Search users..."
          class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-600"
        />
        <div id="search-results" class="mt-4 space-y-3"></div>
      </div>

      <!-- Trending Topics -->
      <div class="bg-white rounded-lg shadow-md p-6">
        <h3 class="text-lg font-bold mb-4">Trending Topics</h3>
        <div class="space-y-2">
          <a href="#" class="block text-blue-600 hover:text-blue-800">#WebDevelopment</a>
          <a href="#" class="block text-blue-600 hover:text-blue-800">#JavaScript</a>
          <a href="#" class="block text-blue-600 hover:text-blue-800">#TechNews</a>
        </div>
      </div>
    </div>
  </div>

  <!-- Create Post Modal -->
  <div id="create-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
    <div class="bg-white rounded-lg max-w-2xl w-full p-6">
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-2xl font-bold">Create Post</h2>
        <button id="close-modal" class="text-gray-500 hover:text-gray-700">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <form id="post-form" class="space-y-4">
        <input
          type="text"
          id="post-title"
          placeholder="Title"
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-600"
          required
        />
        <textarea
          id="post-content"
          placeholder="What's on your mind?"
          rows="6"
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-600"
          required
        ></textarea>
        <input
          type="text"
          id="post-tags"
          placeholder="Tags (comma separated)"
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-600"
        />
        <button type="submit" class="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white py-3 rounded-lg font-semibold hover:from-blue-700 hover:to-purple-700 transition">
          Publish Post
        </button>
      </form>
    </div>
  </div>

  <!-- ‚úÖ Load Socket.IO from CDN -->
  <script src="https://cdn.socket.io/4.8.1/socket.io.min.js"></script>

<script type="module">
// @ts-nocheck
const API_URL = 'http://localhost:3001/api';
const token = localStorage.getItem('token');
if (!token) window.location.href = '/login';

let currentUser = null;
const socket = io('http://localhost:3001', { auth: { token } });

// ==========================
// üîπ Helper Functions
// ==========================

// Render a single comment
function renderComment(c, postId) {
  const own = c.userId === currentUser._id;
  return `
    <div id="comment-${c._id}" class="flex items-start space-x-3">
      <img src="${c.author?.avatar || '/default.png'}" class="w-8 h-8 rounded-full">
      <div class="bg-white rounded-lg p-3 shadow-sm w-full relative">
        <p class="text-sm font-semibold">${c.author?.displayName || 'Unknown'}</p>
        <p class="text-gray-700 text-sm">${c.text}</p>
        ${own ? `<button onclick="deleteComment('${postId}', '${c._id}')" class="absolute top-1 right-2 text-gray-400 hover:text-red-500 text-xs">üóëÔ∏è</button>` : ''}
      </div>
    </div>
  `;
}

// Update comment counter
function updateCommentCount(postId, delta) {
  const el = document.getElementById(`comment-count-${postId}`);
  if (el) el.textContent = parseInt(el.textContent) + delta;
}

// Update character counter
window.updateCounter = (input, postId) => {
  document.getElementById(`counter-${postId}`).textContent = `${input.value.length} / 300`;
}

// ==========================
// üîπ Load Current User
// ==========================
async function loadCurrentUser() {
  const res = await fetch(`${API_URL}/users/me`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  currentUser = await res.json();
  document.getElementById('user-avatar').src = currentUser.avatar;
}

// ==========================
// üîπ Load Posts
// ==========================
async function loadPosts() {
  const res = await fetch(`${API_URL}/posts`, { headers: { 'Authorization': `Bearer ${token}` } });
  const posts = await res.json();
  const container = document.getElementById('posts-container');

  if (!posts || !posts.length) {
    container.innerHTML = '<p class="text-gray-500 text-center py-8">No posts yet.</p>';
    return;
  }

  container.innerHTML = posts.map(post => `
    <div class="bg-white rounded-lg shadow-md overflow-hidden" id="post-${post._id}">
      <div class="p-6">
        <div class="flex items-center space-x-3 mb-4">
          <img src="${post.author.avatar}" class="w-10 h-10 rounded-full" />
          <div>
            <h4 class="font-semibold">${post.author.displayName}</h4>
            <p class="text-sm text-gray-500">${new Date(post.createdAt).toLocaleDateString()}</p>
          </div>
        </div>
        <h3 class="text-xl font-bold mb-2">${post.title}</h3>
        <p class="text-gray-700 mb-4">${post.content}</p>
        ${post.tags?.length ? `
          <div class="flex flex-wrap gap-2 mb-4">
            ${post.tags.map(tag => `<span class="bg-blue-100 text-blue-600 px-3 py-1 rounded-full text-sm">${tag}</span>`).join('')}
          </div>` : ''}
        <div class="flex items-center space-x-6 pt-4 border-t">
          <button onclick="likePost('${post._id}')" class="flex items-center space-x-2 text-gray-600 hover:text-blue-600">
            ‚ù§Ô∏è <span id="like-count-${post._id}">${post.likes?.length || 0}</span>
          </button>
          <button onclick="toggleComments('${post._id}')" class="flex items-center space-x-2 text-gray-600 hover:text-blue-600">
            üí¨ <span id="comment-count-${post._id}">${post.comments?.length || 0}</span>
          </button>
        </div>
      </div>
      <div id="comments-${post._id}" class="hidden border-t bg-gray-50 p-4"></div>
    </div>
  `).join('');
}

// ==========================
// üîπ Toggle / Load Comments
// ==========================
async function toggleComments(postId) {
  const section = document.getElementById(`comments-${postId}`);
  if (section.classList.contains('hidden')) {
    await loadComments(postId);
    section.classList.remove('hidden');
  } else {
    section.classList.add('hidden');
  }
}

async function loadComments(postId) {
  const res = await fetch(`${API_URL}/posts/${postId}/comments`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  const comments = await res.json();
  const section = document.getElementById(`comments-${postId}`);
  section.innerHTML = `
    <div class="space-y-3">
      ${comments.map(c => renderComment(c, postId)).join('')}
    </div>
    <form onsubmit="addComment(event, '${postId}')" class="mt-4">
      <div class="flex space-x-2 items-center">
        <input type="text" name="comment" maxlength="300" placeholder="Write a comment..."
          oninput="updateCounter(this, '${postId}')"
          class="flex-1 border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-600" required>
        <button class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">Post</button>
      </div>
      <p id="counter-${postId}" class="text-xs text-gray-500 mt-1">0 / 300</p>
    </form>
  `;
}

// ==========================
// üîπ Add / Delete Comments
// ==========================
window.addComment = async (e, postId) => {
  e.preventDefault();
  const input = e.target.comment;
  const text = input.value.trim();
  if (!text) return;

  const res = await fetch(`${API_URL}/posts/${postId}/comments`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
    body: JSON.stringify({ text })
  });

  const comment = await res.json();
  if (!comment.error) {
    input.value = '';
    updateCounter(input, postId);

    // Emit new comment to server for real-time updates
    socket.emit('new-comment', { postId, comment });

    // Update locally if section visible
    const section = document.getElementById(`comments-${postId}`);
    if (section && !section.classList.contains('hidden')) {
      const list = section.querySelector('.space-y-3');
      list.insertAdjacentHTML('beforeend', renderComment(comment, postId));
      updateCommentCount(postId, 1);
    }
  }
};

window.deleteComment = async (postId, commentId) => {
  const res = await fetch(`${API_URL}/posts/${postId}/comments/${commentId}`, {
    method: 'DELETE',
    headers: { 'Authorization': `Bearer ${token}` }
  });
  if (res.ok) {
    document.getElementById(`comment-${commentId}`)?.remove();
    updateCommentCount(postId, -1);
  }
};

// ==========================
// üîπ Like Post
// ==========================
window.likePost = async (postId) => {
  socket.emit('toggle-like', { postId });
};

// ==========================
// üîπ User Search with Debounce
// ==========================
let searchTimeout;
document.getElementById('user-search').addEventListener('input', (e) => {
  clearTimeout(searchTimeout);
  searchTimeout = setTimeout(async () => {
    const query = e.target.value.trim();
    if (!query) return document.getElementById('search-results').innerHTML = '';
    const res = await fetch(`${API_URL}/users/search?q=${query}`, { headers: { 'Authorization': `Bearer ${token}` } });
    const users = await res.json();
    document.getElementById('search-results').innerHTML = users.map(u => `
      <a href="/profile/${u._id}" class="flex items-center space-x-3 p-2 hover:bg-gray-50 rounded-lg">
        <img src="${u.avatar}" class="w-10 h-10 rounded-full" />
        <div>
          <p class="font-semibold text-sm">${u.displayName}</p>
          <p class="text-xs text-gray-500">@${u.username}</p>
        </div>
      </a>
    `).join('');
  }, 300);
});

// ==========================
// üîπ Socket.IO Real-time Listeners
// ==========================
socket.on('new-comment', ({ postId, comment }) => {
  const section = document.getElementById(`comments-${postId}`);
  if (!section) return;
  const list = section.querySelector('.space-y-3') || (() => {
    const div = document.createElement('div');
    div.className = 'space-y-3';
    section.prepend(div);
    return div;
  })();
  list.insertAdjacentHTML('beforeend', renderComment(comment, postId));
  updateCommentCount(postId, 1);
});

socket.on('delete-comment', ({ postId, commentId }) => {
  document.getElementById(`comment-${commentId}`)?.remove();
  updateCommentCount(postId, -1);
});

socket.on('update-likes', ({ postId, likes }) => {
  const likeEl = document.getElementById(`like-count-${postId}`);
  if (likeEl) likeEl.textContent = likes.length;
});

// ==========================
// üîπ Modal Controls
// ==========================
document.getElementById('create-post-btn').addEventListener('click', () => {
  document.getElementById('create-modal').classList.remove('hidden');
});
document.getElementById('close-modal').addEventListener('click', () => {
  document.getElementById('create-modal').classList.add('hidden');
});

// ==========================
// üîπ Create Post
// ==========================
document.getElementById('post-form').addEventListener('submit', async (e) => {
  e.preventDefault();
  const title = document.getElementById('post-title').value.trim();
  const content = document.getElementById('post-content').value.trim();
  const tags = document.getElementById('post-tags').value.split(',').map(t => t.trim()).filter(t => t);

  if (!title || !content) return;

  const res = await fetch(`${API_URL}/posts`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
    body: JSON.stringify({ title, content, tags })
  });

  if (res.ok) {
    document.getElementById('create-modal').classList.add('hidden');
    document.getElementById('post-form').reset();
    await loadPosts();
  }
});

// ==========================
// üîπ Init
// ==========================
(async () => {
  await loadCurrentUser();
  await loadPosts();
})();
</script>

</Layout>